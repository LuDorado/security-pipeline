Parameters:
######## Codepipeline parameters ########
  Provider:
    Type: String
    Default: GitHub

  ProviderRepo:
    Type: String
    Default: security-codepipeline

  ProviderBranch:
    Description: CodeCommit branch name
    Type: String
    Default: codepipeline_setup

  ConnectionArn:
    Description: "ARN of a pre-existen connection set up, if exists"
    Type: String
    Default: ""

  Owner:
    Type: String
    Default: LuDorado

  Stage:
      Description: Elastic beanstalk environment name
      Type: String

######## Cluster parameters ########
  ClusterName:
    Type: String
    Default: meetup-demo
  
  ECRRepository:
    Type: String
    Default: meetup-demo

######## elb parameters ########
  # DefaultAcmCertificateArn:
  #   Type: String
  #   Default: arn:aws:acm:us-east-1:354980777202:certificate/db69ce52-32ed-4bb5-abd9-3e40f3d8174d

  HasHTTPS:
    Type: String
    Default: false

  SiteTgPriority:
    Type: String
    Default: 2

######## service parameters ########
  ContainerVirtualCPUs:
    Type: Number
    Default: 256

  ContainerMemoryMin:
    Type: Number
    Default: 512

  ContainerMemoryMax:
    Type: String
    Default: LIMITLESS

  AlbHealthCheckStartPeriod:
    Type: String
    Default: 5

######## ssm parameters ########
  SonarQubeScanToken: #meetup-demo-token: sqp_6eac36802bf3c509f23f4a6e763dce6223a10615
    Description: Sonarqube scanning token
    Type: String
    NoEcho: true
  
  SonarQubeURLName:
    Description: SonarQube SAST tool URL
    Type: String

  LambdaPackageLoc:
    Description: S3 loc of lambda package
    Type: String
  LambdaPackageS3Key:
    Description: S3 Key for Lambda package object
    Type: String
    Default: import_findings_security_hub.zip

  LambdaHandlerName:
    Description: Name of the lambda handler
    Type: String
    Default: import_findings_security_hub.lambda_handler

  OwaspZapURLName:
    Description: OWASP Zap DAST Tool URL
    Type: String

  ApplicationURLForDASTScan:
    Description: Application URL to run the DAST/Pen testing 
    Type: String

  OwaspZapApiKey:
    Description: OWASP Zap ApiKey
    Type: String
    NoEcho: true

  PipelineNotificationsEmail:
    Description: Email address to receive SNS notifications for pipelineChanges
    Type: String

  PipelineApproverEmail:
    Description: Email address to send approval notifications
    Type: String
  
  EcsTasksNumber:
    Type: String
    Default: 2
  
  DefaultAcmCertificateArn:
    Type: String
    Default: ""
  
  Port:
    Type: String
    Default: 3000
    
  ECSConatinerInsgtEnabled: 
    Description: If ECS Container Insight is enabled or not
    Type: String
    Default: false

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Codepipeline General Params
      Parameters:
        - Owner
        - Provider
        - ProviderRepo
        - ProviderBranch
        - ConnectionArn

    - Label:
        default: Cluster General Params
      Parameters:
        - ClusterName
        - Stage

Conditions:
  CreateProdResources: !Equals 
    - !Ref Stage
    - prod

Resources:
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      RoleName: !Sub cfn-${AWS::StackName}-${Stage}-role
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: cloudformation-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - autoscaling:*
                  - cloudwatch:*
                  - ec2:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - events:*
                  - iam:*
                  - ssm:*
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                  - route53:*
                  - secretsmanager:*
                  - elasticache:*
                  - rds:*
                  - wafv2:*
                  - globalaccelerator:*
                  - s3:*
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DescribeScalingPolicies
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:DescribeScalingActivities
                  - application-autoscaling:DeleteScalingPolicy
                  - logs:CreateLogDelivery

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:*
                  - cloudformation:*
                  - ecs:*
                  - ec2:*
                  - ecr:*
                  - s3:*
                  - ssm:*

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: codepipeline-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - cloudwatch:*
                  - events:*
                  - iam:PassRole
                  - secretsmanager:*
                  - ec2:*
                  - s3:*
                  - codestar-connections:UseConnection

  CodeBuildProject:
    DependsOn: CodeBuildServiceRole
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Location: !Sub ${ClusterName}-${Stage}-artifact-bucket
        Type: "S3"
      Source:
        Location:
          Fn::Join:
            - '/'
            - - !Sub ${ClusterName}-${Stage}-artifact-bucket
              - source.zip
        Type: "S3"
        BuildSpec: |
          version: 0.2
          env:
            exported-variables:
              - IMAGE_TAG
          phases:
            install:
              commands:
                - n install 16
                - node --version
                - echo Logging in to Amazon ECR... #
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
            pre_build:
              commands:
                - TAG="$(date +%Y-%m-%d-%H%M%S)"
                - IMAGE_TAG=${TAG:=latest}
            build:
              commands:
                - npm -v
                - node -v
                - docker build -t $REPOSITORY_NAME .
            post_build:
              commands:
                - docker tag $REPOSITORY_NAME:latest $REPOSITORY_URI/$REPOSITORY_NAME:$IMAGE_TAG
                - docker push $REPOSITORY_URI/$REPOSITORY_NAME:$IMAGE_TAG
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/standard:7.0"
        Type: "LINUX_CONTAINER"
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          - Name: REPOSITORY_NAME
            Value: !Ref ECRRepository

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ClusterName}-${Stage}-service
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub ${ClusterName}-${Stage}-artifact-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Sub ${Owner}/${ProviderRepo}
                BranchName: !Ref ProviderBranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              Namespace: BuildVariables
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: App
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

            # - Name: CreateELBChangeSet
            #   ActionTypeId:
            #     Category: Deploy
            #     Owner: AWS
            #     Version: '1'
            #     Provider: CloudFormation
            #   Configuration:
            #     ChangeSetName: Deploy
            #     ActionMode: CHANGE_SET_REPLACE
            #     StackName: !Sub ${ClusterName}-${Stage}-service-elb
            #     Capabilities: CAPABILITY_NAMED_IAM
            #     TemplatePath: App::devops/services/cloudformation/service-elb.yml
            #     RoleArn: !GetAtt CloudFormationExecutionRole.Arn
            #     ParameterOverrides: !Sub |
            #       {
            #         "ClusterName": "${ClusterName}",
            #         "Stage": "${Stage}",
            #         # "SiteName": "${Host}",
            #         "DefaultAcmCertificateArn": "${DefaultAcmCertificateArn}",
            #         "HasHTTPS": "${HasHTTPS}",
            #         "SiteTgPriority": "${SiteTgPriority}"
            #       }
            #   RunOrder: 1
            #   InputArtifacts:
            #     - Name: App

            # - Name: ExecuteELBChangeSet
            #   ActionTypeId:
            #     Category: Deploy
            #     Owner: AWS
            #     Version: '1'
            #     Provider: CloudFormation
            #   Configuration:
            #     ChangeSetName: Deploy
            #     ActionMode: CHANGE_SET_EXECUTE
            #     StackName: !Sub ${ClusterName}-${Stage}-service-elb
            #     RoleArn: !GetAtt CloudFormationExecutionRole.Arn
            #   RunOrder: 2

            - Name: CreateECSChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${ClusterName}-${Stage}-service-ecs
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: App::codepipeline/ecs.yml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ClusterName": "${ClusterName}",
                    "Stage": "${Stage}",
                    "ContainerPort": "${Port}",
                    "ContainerVirtualCPUs": "${ContainerVirtualCPUs}",
                    "ContainerMemoryMin": "${ContainerMemoryMin}",
                    "ContainerMemoryMax": "${ContainerMemoryMax}",
                    "AlbHealthCheckStartPeriod": "${AlbHealthCheckStartPeriod}",
                    "BuildNumber": "#{BuildVariables.IMAGE_TAG}",
                    "EcsTasksNumber": "${EcsTasksNumber}"
                  }
              RunOrder: 3
              InputArtifacts:
                - Name: App
                - Name: BuildOutput

            - Name: ExecuteECSChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub ${ClusterName}-${Stage}-service-ecs
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
              RunOrder: 4

  # CodepipelineNotification:
  #   Type: AWS::CodeStarNotifications::NotificationRule
  #   Properties: 
  #     DetailType: FULL
  #     EventTypeIds: 
  #       - codepipeline-pipeline-pipeline-execution-failed
  #       - codepipeline-pipeline-pipeline-execution-canceled
  #       - codepipeline-pipeline-pipeline-execution-started
  #       - codepipeline-pipeline-pipeline-execution-resumed
  #       - codepipeline-pipeline-pipeline-execution-succeeded
  #       - codepipeline-pipeline-pipeline-execution-superseded
  #       - codepipeline-pipeline-stage-execution-resumed
  #       - codepipeline-pipeline-stage-execution-canceled
  #       - codepipeline-pipeline-stage-execution-failed
  #     Name: !Sub ${ClusterName}-${Stage}
  #     Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ClusterName}-${Stage}-service"
  #     Targets: 
  #       - TargetType: AWSChatbotSlack
  #         TargetAddress: !ImportValue Chatbot-deploys-notificationsArn

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}

  CodePipeline:
    Value: !Ref Pipeline
    Export:
      Name: !Sub ${ClusterName}-${Stage}-CodePipeline
